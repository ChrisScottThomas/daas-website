---
// src/pages/checkout/invoice.astro
import Base from "../../layouts/base.astro";
---

<Base title="Request Invoice — Clarity.">
  <main class="max-w-3xl mx-auto px-4 py-24 text-left">
    <h1 class="text-4xl font-bold mb-6 text-center">Request an Invoice</h1>

    <p
      id="planName"
      class="text-base text-gray-600 dark:text-gray-300 mb-6 text-center"
    >
      Loading selected plan…
    </p>

    <form
      id="invoiceForm"
      class="space-y-6 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-xl p-8 shadow-sm"
    >
      <input type="hidden" name="planId" id="planIdInput" />

      <!-- Full Name -->
      <div>
        <label class="block text-sm font-medium mb-1" for="name"
          >Full Name*</label
        >
        <input
          required
          type="text"
          id="name"
          name="name"
          class="w-full px-4 py-2 border rounded dark:bg-gray-800"
        />
      </div>

      <!-- Work Email -->
      <div>
        <label class="block text-sm font-medium mb-1" for="email"
          >Work Email*</label
        >
        <input
          required
          type="email"
          id="email"
          name="email"
          class="w-full px-4 py-2 border rounded dark:bg-gray-800"
        />
      </div>

      <!-- Organisation Name -->
      <div>
        <label class="block text-sm font-medium mb-1" for="org"
          >Organisation Name*</label
        >
        <input
          required
          type="text"
          id="org"
          name="org"
          class="w-full px-4 py-2 border rounded dark:bg-gray-800"
        />
      </div>

      <!-- Billing Address -->
      <div class="space-y-4">
        <div>
          <label for="premise" class="block text-sm font-medium mb-1"
            >Address Line 1*</label
          >
          <input
            required
            type="text"
            id="premise"
            name="premise"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800"
          />
        </div>

        <div>
          <label for="street" class="block text-sm font-medium mb-1"
            >Address Line 2</label
          >
          <input
            type="text"
            id="street"
            name="street"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800"
          />
        </div>

        <div>
          <label for="locality" class="block text-sm font-medium mb-1"
            >Address Line 3</label
          >
          <input
            type="text"
            id="locality"
            name="locality"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800"
          />
        </div>

        <div>
          <label for="town" class="block text-sm font-medium mb-1"
            >City/Town*</label
          >
          <input
            required
            type="text"
            id="town"
            name="town"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800"
          />
        </div>

        <div>
          <label for="county" class="block text-sm font-medium mb-1"
            >County</label
          >
          <input
            type="text"
            id="county"
            name="county"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800"
          />
        </div>

        <div>
          <label for="postcode" class="block text-sm font-medium mb-1"
            >Postcode*</label
          >
          <input
            required
            type="text"
            id="postcode"
            name="postcode"
            title="Enter a valid UK postcode"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800 uppercase"
          />
        </div>

        <div>
          <label for="country" class="block text-sm font-medium mb-1"
            >Country</label
          >
          <input
            type="text"
            id="country"
            name="country"
            value="UNITED KINGDOM"
            class="w-full px-4 py-2 border rounded dark:bg-gray-800"
          />
        </div>
      </div>

      <!-- PO Number (Optional) -->
      <div>
        <label class="block text-sm font-medium mb-1" for="po">PO Number</label>
        <input
          type="text"
          id="po"
          name="po"
          class="w-full px-4 py-2 border rounded dark:bg-gray-800"
        />
      </div>

      <!-- Submit -->
      <button
        type="submit"
        disabled
        class="bg-[#429EDB] hover:bg-[#1F78C1] text-white font-semibold px-6 py-3 rounded-xl transition w-full disabled:opacity-50 disabled:cursor-not-allowed"
      >
        Request Invoice
      </button>
    </form>

    <p id="formSuccess" class="text-green-600 mt-6 hidden text-center">
      Your request has been received. We'll be in touch shortly.
    </p>

    <p id="formError" class="text-red-600 mt-6 hidden text-center">
      Something went wrong. Please try again or contact support.
    </p>
  </main>

  <script type="module">
    const params = new URLSearchParams(window.location.search);
    const planId = params.get("plan");

    const plans = {
      clarity_base_monthly: { name: "Clarity. Base — Monthly" },
      clarity_plus_quarterly: { name: "Clarity. Plus — Quarterly" },
      clarity_partner_annually: { name: "Clarity. Partner — Annually" },
    };

    const plan = plans[planId];
    const planNameEl = document.getElementById("planName");
    const form = document.getElementById("invoiceForm");
    const planIdInput = document.getElementById("planIdInput");
    const successMsg = document.getElementById("formSuccess");
    const errorMsg = document.getElementById("formError");
    const submitBtn = form.querySelector("button[type='submit']");

    if (!plan) {
      planNameEl.textContent = "Invalid or missing plan.";
      form.style.display = "none";
    } else {
      planNameEl.innerHTML = `For: <strong>${plan.name}</strong>`;
      planIdInput.value = planId;
    }

    // Create and show inline error messages
    function showInlineError(input, message) {
      let errorEl = input.parentElement.querySelector(".inline-error");
      if (!errorEl) {
        errorEl = document.createElement("p");
        errorEl.className = "inline-error text-sm text-red-600 mt-1";
        input.parentElement.appendChild(errorEl);
      }
      errorEl.textContent = message;
    }

    function clearInlineError(input) {
      const errorEl = input.parentElement.querySelector(".inline-error");
      if (errorEl) errorEl.remove();
    }

    // Validation logic
    function validateField(input) {
      clearInlineError(input);
      const value = input.value.trim();
      const name = input.name;

      if (input.required && !value) {
        showInlineError(input, "This field is required.");
        return false;
      }

      if (name === "email" && !/^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$/.test(value)) {
        showInlineError(input, "Please enter a valid email address.");
        return false;
      }

      if (name === "postcode") {
        const original = input.value.trim().toUpperCase();
        const normalised = original.replace(
          /^([A-Z]{1,2}\d{1,2}[A-Z]?)\s?(\d[A-Z]{2})$/,
          "$1 $2",
        );

        input.value = normalised;

        const postcodePattern = /^[A-Z]{1,2}\d{1,2}[A-Z]?\s\d[A-Z]{2}$/;
        const isValidPostcode = postcodePattern.test(normalised);

        console.log("Validating postcode:", {
          original,
          normalised,
          isValidPostcode,
        });

        if (!isValidPostcode) {
          showInlineError(input, "Enter a valid UK postcode.");
          return false;
        }
      }

      return true;
    }

    function validateForm() {
      let isValid = true;
      form.querySelectorAll("input, textarea").forEach((input) => {
        if (!validateField(input)) isValid = false;
      });
      submitBtn.disabled = !isValid;
      return isValid;
    }

    // Debounce helper
    function debounce(fn, delay = 300) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => fn(...args), delay);
      };
    }

    // Watch input changes
    form.querySelectorAll("input, textarea").forEach((input) => {
      input.addEventListener(
        "input",
        debounce(() => validateForm()),
      );
      input.addEventListener("blur", () => validateField(input)); // Validate on blur for UX
    });

    // Form submission
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      successMsg.classList.add("hidden");
      errorMsg.classList.add("hidden");

      if (!validateForm()) return;

      const data = Object.fromEntries(new FormData(form));
      data.timestamp = new Date().toISOString();

      const addressLines = [
        data.premise,
        data.street,
        data.locality,
        data.town,
        data.county,
        data.postcode,
        data.country,
      ].filter(Boolean);

      data.billingAddress = addressLines.join(", ");

      delete data.premise;
      delete data.street;
      delete data.locality;
      delete data.town;
      delete data.county;
      delete data.postcode;
      delete data.country;

      try {
        const res = await fetch("API_URL_HERE", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });

        if (res.ok) {
          form.reset();
          submitBtn.disabled = true;
          successMsg.classList.remove("hidden");
        } else {
          errorMsg.classList.remove("hidden");
        }
      } catch {
        errorMsg.classList.remove("hidden");
      }
    });
  </script>
</Base>
